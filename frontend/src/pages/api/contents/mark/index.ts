import { NextApiRequest, NextApiResponse } from 'next';
import fetch from 'node-fetch';
import FormData from 'form-data';

/**
 * @swagger
 * /api/contents/mark:
 *   post:
 *     summary: Process face recognition and mark attendance
 *     description: Endpoint to either recognize a face from an image or mark attendance with facial verification
 *     tags: [Face Recognition]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - action
 *               - imageData
 *             properties:
 *               action:
 *                 type: string
 *                 enum: [recognize, mark]
 *                 description: The action to perform - either recognize a face or mark attendance
 *                 example: "recognize"
 *               imageData:
 *                 type: string
 *                 format: base64
 *                 description: Base64 encoded image data (JPEG)
 *                 example: ""
 *               name:
 *                 type: string
 *                 description: Required for 'mark' action - name of the person
 *                 example: ""
 *               group:
 *                 type: string
 *                 description: Required for 'mark' action - group/class identifier
 *                 example: ""
 *     responses:
 *       200:
 *         description: Successfully processed the request
 *         content:
 *           application/json:
 *             schema:
 *               oneOf:
 *                 - type: object
 *                   properties:
 *                     status:
 *                       type: string
 *                       example: "success"
 *                     recognizedPerson:
 *                       type: object
 *                       properties:
 *                         name:
 *                           type: string
 *                           example: "John Doe"
 *                         confidence:
 *                           type: number
 *                           example: 0.98
 *                 - type: object
 *                   properties:
 *                     status:
 *                       type: string
 *                       example: "success"
 *                     attendanceMarked:
 *                       type: boolean
 *                       example: true
 *                     timestamp:
 *                       type: string
 *                       format: date-time
 *                       example: "2024-10-29T10:30:00Z"
 *       400:
 *         description: Bad request - Missing or invalid parameters
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: "error"
 *                 message:
 *                   type: string
 *                   example: "Missing required fields"
 *       405:
 *         description: Method not allowed
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 error:
 *                   type: string
 *                   example: "Method GET Not Allowed"
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: "error"
 *                 message:
 *                   type: string
 *                   example: "An unexpected error occurred"
 * 
 * components:
 *   schemas:
 *     RecognitionRequest:
 *       type: object
 *       required:
 *         - action
 *         - imageData
 *       properties:
 *         action:
 *           type: string
 *           enum: [recognize]
 *         imageData:
 *           type: string
 *           format: base64
 *     
 *     AttendanceRequest:
 *       type: object
 *       required:
 *         - action
 *         - imageData
 *         - name
 *         - group
 *       properties:
 *         action:
 *           type: string
 *           enum: [mark]
 *         imageData:
 *           type: string
 *           format: base64
 *         name:
 *           type: string
 *         group:
 *           type: string
 *     
 *     RecognitionResponse:
 *       type: object
 *       properties:
 *         status:
 *           type: string
 *         recognizedPerson:
 *           type: object
 *           properties:
 *             name:
 *               type: string
 *             confidence:
 *               type: number
 *     
 *     AttendanceResponse:
 *       type: object
 *       properties:
 *         status:
 *           type: string
 *         attendanceMarked:
 *           type: boolean
 *         timestamp:
 *           type: string
 *           format: date-time
 *     
 *     ErrorResponse:
 *       type: object
 *       properties:
 *         status:
 *           type: string
 *         message:
 *           type: string
 */

export const config = {
  api: {
    bodyParser: {
      sizeLimit: '10mb',
    },
  },
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    try {
      const { action, imageData } = req.body;

      if (!action || !imageData) {
        throw new Error('Missing required fields');
      }

      if (action === 'recognize') {
        const recognitionResult = await recognizeFace(imageData);
        res.status(200).json(recognitionResult);
      } else if (action === 'mark') {
        const { name, group } = req.body;
        if (!name || !group) {
          throw new Error("Error on recognizing action");
        }
        const markResult = await markAttendance(name, group, imageData);
        res.status(200).json(markResult);
      } else {
        throw new Error('Invalid action');
      }
    } catch (error) {
      console.error('Error:', error);
      res.status(500).json({ status: 'error', message: error.message || 'An unexpected error occurred' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}

//eslint-disable-next-line
async function recognizeFace(imageData: string): Promise<any> {
  const formData = new FormData();
  
  // Remove the "data:image/jpeg;base64," prefix if present
  const base64Data = imageData.replace(/^data:image\/\w+;base64,/, "");
  
  const imageBuffer = Buffer.from(base64Data, 'base64');
  formData.append('image_data', imageBuffer, { filename: 'image.jpg', contentType: 'image/jpeg' });

  const recognizeResponse = await fetch(process.env.NEXT_PUBLIC_API_URL+'/api/recognize', {
    method: 'POST',
    body: formData,
  });

  if (!recognizeResponse.ok) {
    const errorText = await recognizeResponse.text();
    // throw new Error(`Recognition failed with status: ${recognizeResponse.status}, message: ${errorText}`);
    return { status: 'failed', message: errorText };
  }

  return await recognizeResponse.json();
}

//eslint-disable-next-line
async function markAttendance(name: string, group: string, imageData: string): Promise<any> {
  const formData = new FormData();
  formData.append('name', name);
  formData.append('group', group);
  
  // Remove the "data:image/jpeg;base64," prefix if present
  const base64Data = imageData.replace(/^data:image\/\w+;base64,/, "");
  
  const imageBuffer = Buffer.from(base64Data, 'base64');
  formData.append('image_data', imageBuffer, { filename: 'image.jpg', contentType: 'image/jpeg' });
  
  formData.append('attended', 'true');
  formData.append('date', new Date().toISOString());

  const markResponse = await fetch(process.env.NEXT_PUBLIC_API_URL+'/api/mark', {
    method: 'POST',
    body: formData,
  });

  if (!markResponse.ok) {
    const errorText = await markResponse.text();
    // throw new Error(`Marking attendance failed with status: ${markResponse.status}, message: ${errorText}`);
    return { status: 'failed', message: errorText };
  }

  return await markResponse.json();
}